pipeline {
    agent any

    environment {
        SONAR_HOME = tool "sonar"
        Projectname = "wanderlust"
        ProjectKey = "wanderlust-key"
    }

    parameters {
        string(name: 'FRONTEND_DOCKER_TAG', defaultValue: '', description: 'Setting docker image for latest push')
        string(name: 'BACKEND_DOCKER_TAG', defaultValue: '', description: 'Setting docker image for latest push')
    }

    stages {
        stage("Validate Parameters") {
            steps {
                script {
                    if (params.FRONTEND_DOCKER_TAG == '' || params.BACKEND_DOCKER_TAG == '') {
                        error("FRONTEND_DOCKER_TAG and BACKEND_DOCKER_TAG must be provided.")
                    }
                }
            }
        }

        stage("Workspace cleanup") {
            steps {
                cleanWs()
            }
        }

        stage('Git: Code Checkout') {
            steps {
                git branch: 'main', changelog: false, poll: false, url: 'https://github.com/AmittAshok/wanderlust-Project.git'
            }
        }

        stage("Trivy: File system Scan") {
            steps {
                sh "trivy fs ."
            }
        }

        stage("Sonarqube: Code Analysis") {
            steps {
                withCredentials([string(credentialsId: 'sonar', variable: 'sonar')]) {
                    sh "$SONAR_HOME/bin/sonar-scanner -Dsonar.projectName=${Projectname} -Dsonar.projectKey=${ProjectKey} -X"
                }
            }
        }

        stage("Sonarqube: Quality Gate") {
            steps {
                timeout(time: 1, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Exporting environment variables') {
            parallel {
                stage("Backend env setup") {
                    steps {
                        script {
                            dir("Automations") {
                                sh "bash updatebackendnew.sh"
                            }
                        }
                    }
                }

                stage("Frontend env setup") {
                    steps {
                        script {
                            dir("Automations") {
                                sh "bash updatefrontendnew.sh"
                            }
                        }
                    }
                }
            }
        }
        stage("Docker: Build Images"){
            steps{
                script{
                        dir('backend'){
                          sh "docker build -t amittashok/wanderlust-backend-beta:${params.BACKEND_DOCKER_TAG} ."
                        }
                    
                        dir('frontend'){
                          sh "docker build -t amittashok/wanderlust-frontend-beta:${params.FRONTEND_DOCKER_TAG} ." 
                        }
                }
            }
        }
        
        stage("Docker: Push to DockerHub"){
            steps{
                script{
                        withCredentials([usernamePassword(credentialsId: 'Docker-Hub-Cred', passwordVariable: 'DockerPassword', usernameVariable: 'DockerUser')]) {
                            sh  "docker push ${DockerUser}/wanderlust-backend-beta:${params.BACKEND_DOCKER_TAG}" 
                            sh  "docker push ${DockerUser}/wanderlust-frontend-beta:${params.FRONTEND_DOCKER_TAG}"
                }
            }
        }
    }
    post{
        success{
            archiveArtifacts artifacts: '*.xml', followSymlinks: false
            build job: "Wanderlust-CD", parameters: [
                string(name: 'FRONTEND_DOCKER_TAG', value: "${params.FRONTEND_DOCKER_TAG}"),
                string(name: 'BACKEND_DOCKER_TAG', value: "${params.BACKEND_DOCKER_TAG}")
            ]
        }
    }
}